{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env ts-node\n\nimport os = require('os');\nimport path = require('path');\nimport childProcess = require( 'child_process' );\nimport program = require('commander');\nimport readline = require('readline');\nimport {ConnectConfig, Client, ClientChannel} from 'ssh2';\nimport {FSWatcher} from 'chokidar';\nimport {getPackageInfo} from './utils/manifest';\nimport {\n    IAccordanceConfig,\n    readConfig,\n    getAnyMatchIgnorePatterns,\n    writeUnisonConfigFile,\n} from './utils/config';\nimport {\n    makeRed,\n    makeGreen,\n    registerCleanupFn,\n} from './utils/cli';\nimport {buildWatcher} from './utils/watch';\nimport {getConnection} from './utils/remote';\n\n\n/**\n * Interface of an entry in the unison sync queue\n */\ninterface ISyncQueueEntry {\n    config: IAccordanceConfig;\n    source: string;\n    eventType: string;\n    directory: string;\n}\n\n\nclass AccordCLI {\n\n    /**\n     * CLI argument string\n     */\n    private argv: string[];\n\n    /**\n     * True when unison sync process is running. Used to prevent multiple sync processes from running concurrently.\n     */\n    private syncIsRunning: boolean = false;\n\n    /**\n     * Queue of directories that need sync'd. Will be processed in FIFO order.\n     */\n    private syncQueue: ISyncQueueEntry[] = [];\n\n    /**\n     * SSH connection to the remote host. Used to listen for remote INOTIFY events.\n     */\n    private sshClient: Client | undefined;\n\n    /**\n     * Input/Output stream from the SSH connection to the remote host.\n     */\n    private remoteWatcher: ClientChannel | undefined;\n\n    /**\n     * Local FSEvents / INOTIFY watcher.\n     */\n    private localWatcher: FSWatcher | undefined;\n\n\n    /**\n     * Constructor. Initialize the class with an argv string array.\n     */\n    constructor (argv: string[]) {\n        this.argv = argv;\n    }\n\n\n    /**\n     * Main entry point for the CLI program.\n     *\n     * Parses and validates command line options and then dispatches the appropriate action.\n     */\n    public run() {\n        const self = this;\n        const pkg = getPackageInfo();\n        // Setup basic CLI info\n        program\n            .version(pkg.version);\n\n        // Setup initiator action. This watches local FSevents directly, connects to the remote host over SSH to watch\n        // remote FSevents (by running another instance of itself, remotely, in watch more), and runs the actual\n        // unison sync process when an FSevent is received.\n        program\n            .command('sync <configPath>')\n            .description('Run bidirectional sync process with file watching.')\n            .action((configPath) => {\n                self.run__sync(configPath);\n            });\n\n        // Setup remote watcher action. This command is ran over an SSH connection by the sync initiator. It doesn't\n        // actually sync anything - it just watches the given directory and dumps FSevent notifications to stdout. The\n        // sync initiator reacts to those events by running the sync process.\n        program\n            .command('watch <rootPath>')\n            .option(\"-i, --ignore <patterns>\", \"File patterns to ignore, separated by semicolons.\")\n            .description('Run file watcher and dump changed files to stdout.')\n            .action((rootPath, options) => {\n                const ignorePatterns = options.ignore\n                    ? (options.ignore as string).split(';')\n                    : [];\n                self.run__watch(rootPath, ignorePatterns);\n            });\n\n        // Setup catch-all action.\n        program\n            .command('*', '', { noHelp: true, })\n            .action((cmd) => {\n                console.error(makeRed(`Unknown command was provided: \"${cmd}\"`));\n                self.die();\n            });\n\n        // Parse and run\n        program.parse(this.argv);\n        if (program.args.length <= 0) {\n            self.die();\n        }\n    }\n\n\n    /**\n     * Output CLI command help and exit the process.\n     */\n    private die() {\n        program.outputHelp(makeRed);\n        process.exit(1);\n    }\n\n\n    /**\n     * Run the sync initiator process. This does 3 things:\n     *\n     * 1. Watch local FS (INOTIFY) events.\n     * 2. Watch remote FS (INOTIFY) events over an SSH connection.\n     * 3. Queue / run syncs whenever a change is detected.\n     */\n    private run__sync(configPath: string) {\n        const self = this;\n\n        // Read the configuration file\n        const config = readConfig(configPath);\n\n        // Create unison configuration file\n        writeUnisonConfigFile(config);\n\n        // Figure out which files to ignore\n        const watchIgnorePatterns = this.getWatchIgnorePatterns(config);\n\n        // Start local file watcher\n        this.watchLocal(config, watchIgnorePatterns);\n\n        // Start remote file watcher\n        this.watchRemote(config, watchIgnorePatterns);\n\n        // Make sure that file watchers are closed when the process exits\n        registerCleanupFn(() => {\n            console.log('Closing file watchers...');\n            if (self.localWatcher) {\n                self.localWatcher.close();\n            }\n\n            console.log('Closing SSH connection...');\n            if (self.remoteWatcher) {\n                self.remoteWatcher.write('\\x03');\n                self.remoteWatcher.close();\n            }\n            if (self.sshClient) {\n                self.sshClient.end();\n            }\n\n            console.log('Done.');\n        });\n    }\n\n\n    /**\n     * Run the remote file watcher. Dumps FS events to stdout so they can be read over SSH.\n     */\n    private run__watch(rootPath: string, ignorePatterns: string[]) {\n        const watcher = buildWatcher(rootPath, ignorePatterns);\n\n        // Start remote file watcher\n        watcher.on('ready', () => {\n            const watches = watcher.getWatched();\n            const dirs = Object.keys(watches);\n            const fileCount = dirs.reduce((memo, dir) => {\n                return memo + watches[dir].length;\n            }, 0);\n            process.stdout.write(`Finished initial scan. Watching ${fileCount} files in ${dirs.length} directories.\\n`);\n        });\n\n        // Dump change events to stdout\n        watcher.on('all', (eventType: string, filePath: string) => {\n            const relPath = path.relative(rootPath, filePath);\n            const msg = JSON.stringify(['remote', eventType, relPath]);\n            process.stdout.write(`CMD: ${msg}\\n`);\n        });\n\n        // Make sure that file watchers are closed when the process exits\n        registerCleanupFn(() => {\n            process.stdout.write(`Closing remote file watchers...\\n`);\n            watcher.close();\n            process.stdout.write(`Done.\\n`);\n        });\n    }\n\n\n    private watchRemote (config: IAccordanceConfig, ignorePatterns: string[]) {\n        const self = this;\n        const sshAgentSock = process.env.SSH_AUTH_SOCK;\n        const sshConfig: ConnectConfig = {\n            host: config.remote.host,\n            port: 22,\n            username: os.userInfo().username,\n            agent: sshAgentSock,\n        };\n        const cmd = ['accordance', 'watch', config.remote.root];\n        if (ignorePatterns.length > 0) {\n            cmd.push('-i');\n            cmd.push(`'${ignorePatterns.join(';')}'`);\n        }\n\n        const handleRemoteOutputLine = function(line: string) {\n            const command = line.match(/^CMD:\\s(.+)$/);\n            if (!command) {\n                console.log(`REMOTE: ${line}`);\n                return;\n            }\n            const [source, eventType, filePath] = (JSON.parse(command[1]) as string[]);\n            self.queueSync(config, source, eventType, filePath);\n        };\n\n        getConnection(sshConfig, (conn) => {\n            self.sshClient = conn;\n            conn.exec(cmd.join(' '), { pty: true }, (err, stream) => {\n                if (err) {\n                    throw err;\n                }\n\n                self.remoteWatcher = stream;\n\n                // Buffer stdout and action on each line\n                const stdoutBuffer = readline.createInterface({ input: stream, });\n                stdoutBuffer.on('line', (line: string) => {\n                    handleRemoteOutputLine(line);\n                });\n\n                // Buffer stderr and log each line\n                const stderrBuffer = readline.createInterface({ input: stream.stderr, });\n                stderrBuffer.on('line', (line: string) => {\n                    console.log(makeRed(`REMOTE ERROR: ${line}`));\n                });\n\n                // Log connection close events\n                stream.on('close', (code: number, signal: number) => {\n                    console.log(makeRed(`Connection to remote was closed with code ${code}, signal: ${signal}`));\n                    conn.end();\n                });\n            });\n        });\n    }\n\n\n    private watchLocal (config: IAccordanceConfig, ignorePatterns: string[]) {\n        const self = this;\n\n        console.log('Starting local file watchers...');\n\n        const watcher = buildWatcher(config.local.root, ignorePatterns);\n        watcher.on('ready', () => {\n            const watches = watcher.getWatched();\n            const dirs = Object.keys(watches);\n            const fileCount = dirs.reduce((memo, dir) => {\n                return memo + watches[dir].length;\n            }, 0);\n            console.log(`Finished initial scan. Watching ${fileCount} files in ${dirs.length} directories.`);\n\n            // Run initial sync\n            self.queueSync(config, 'local', 'initial', '.');\n        });\n\n        // React to FS changes\n        watcher.on('all', (eventType: string, filePath: string) => {\n            const relPath = path.relative(config.local.root, filePath);\n            self.queueSync(config, 'local', eventType, relPath);\n        });\n\n        this.localWatcher = watcher;\n    }\n\n\n    private queueSync (config: IAccordanceConfig, source: string, eventType: string, filePath: string) {\n        const dir = path.dirname(filePath);\n        const existing = this.syncQueue\n            .filter((e) => {\n                return e.directory === dir;\n            });\n        if (existing.length > 0) {\n            return;\n        }\n\n        // If the sync queue if getting huge, wipe it a sync everything\n        if (this.syncQueue.length > 50) {\n            const msg = `${source.toUpperCase()}: ${eventType} ${filePath}`;\n            console.log(makeGreen(msg));\n            this.syncQueue = [\n                {\n                    config: config,\n                    source: source,\n                    eventType: 'overflow',\n                    directory: '.',\n                }\n            ];\n            this.runSync();\n        }\n\n        // Otherwise, just queue the sync\n        console.log(makeGreen(`QUEUE: Detected ${eventType} to ${filePath} on ${source}`));\n        this.syncQueue.push({\n            config: config,\n            source: source,\n            eventType: eventType,\n            directory: dir,\n        });\n        this.runSync();\n    }\n\n\n    private getWatchIgnorePatterns (config: IAccordanceConfig) {\n        let watchIgnorePatterns: string[] = [];\n        if (config.syncIgnore) {\n            watchIgnorePatterns = watchIgnorePatterns.concat(getAnyMatchIgnorePatterns(config.local.root, config.syncIgnore));\n        }\n        if (config.watchIgnore) {\n            watchIgnorePatterns = watchIgnorePatterns.concat(getAnyMatchIgnorePatterns(config.local.root, config.watchIgnore));\n        }\n        return watchIgnorePatterns;\n    }\n\n\n    private runSync () {\n        const self = this;\n\n        // Use locking to make sure we only run one sync at a time\n        if (this.syncIsRunning) {\n            return;\n        }\n\n        // Figure out what to sync\n        const queueEntry = this.syncQueue.shift();\n        if (!queueEntry) {\n            return;\n        }\n\n        // Run the sync\n        this.syncIsRunning = true;\n        try {\n            console.log(makeGreen(`SYNCING: ${queueEntry.directory}`));\n            const child = childProcess.spawn('unison', [queueEntry.config.name, '-path', queueEntry.directory]);\n\n            const writeLines = function(stream: NodeJS.WritableStream, data: string | Buffer) {\n                const lines = data\n                    .toString()\n                    .split('\\n')\n                    .map((line) => {\n                        if (!line || line === '\\n' || line === '\\r') {\n                            return line;\n                        }\n                        if (line.indexOf('\\r') !== -1) {\n                            return `\\rUNISON: ${line.replace('\\r', '')}`;\n                        }\n                        return `UNISON: ${line}`;\n                    })\n                    .join('\\n');\n                stream.write(lines);\n            };\n\n            // Pipe child process stdout to main process stdout\n            child.stdout.on('data', (data) => {\n                writeLines(process.stdout, data);\n            });\n\n            // Pipe child process stderr to main process stderr\n            child.stderr.on('data', (data) => {\n                writeLines(process.stderr, data);\n            });\n\n            // Handle sync finish\n            child.on('close', (code) => {\n                // Unset sync locks\n                self.syncIsRunning = false;\n                // Log any errors\n                if (code !== 0) {\n                    console.log(makeRed(`Unison exited with code ${code}`));\n                }\n                // If more sync actions were requested while this sync was running, run sync again.\n                if (self.syncQueue.length > 0) {\n                    setImmediate(() => {\n                        self.runSync();\n                    });\n                }\n            });\n        } catch (e) {\n            console.error(e);\n            self.syncIsRunning = false;\n        }\n    }\n}\n\n\nconst main = function(argv: string[]) {\n    const cli = new AccordCLI(argv);\n    cli.run();\n};\n\n\nmain(process.argv);\n"]}