{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport os = require('os');\nimport path = require('path');\nimport childProcess = require( 'child_process' );\nimport program = require('commander');\nimport readline = require('readline');\nimport {ConnectConfig, Client, ClientChannel} from 'ssh2';\nimport {FSWatcher} from 'chokidar';\nimport {getPackageInfo, checkForUpdates} from './utils/manifest';\nimport {\n    IAccordanceConfig,\n    readConfig,\n    getAnyMatchIgnorePatterns,\n    writeUnisonConfigFile,\n} from './utils/config';\nimport {\n    makeRed,\n    makeYellow,\n    makeGreen,\n    registerCleanupFn,\n} from './utils/cli';\nimport {ISyncQueueEntry, SyncQueue} from './utils/queue';\nimport {buildWatcher} from './utils/watch';\nimport {getConnection} from './utils/remote';\n\n\nclass AccordCLI {\n\n    /**\n     * CLI argument string\n     */\n    private readonly argv: string[];\n\n    /**\n     * Queue of directories that need sync'd. Will be processed in FIFO order.\n     */\n    private readonly syncQueue = new SyncQueue(() => { this.runSync(); });\n\n    /**\n     * True when unison sync process is running. Used to prevent multiple sync processes from running concurrently.\n     */\n    private syncIsRunning: boolean = false;\n\n    /**\n     * SSH connection to the remote host. Used to listen for remote INOTIFY events.\n     */\n    private sshClient: Client | undefined;\n\n    /**\n     * Input/Output stream from the SSH connection to the remote host.\n     */\n    private remoteWatcher: ClientChannel | undefined;\n\n    /**\n     * Local FSEvents / INOTIFY watcher.\n     */\n    private localWatcher: FSWatcher | undefined;\n\n\n    /**\n     * Constructor. Initialize the class with an argv string array.\n     */\n    constructor (argv: string[]) {\n        this.argv = argv;\n    }\n\n\n    /**\n     * Main entry point for the CLI program.\n     *\n     * Parses and validates command line options and then dispatches the appropriate action.\n     */\n    public async run() {\n        const self = this;\n        const pkg = getPackageInfo();\n\n        // Check for outdated pkg\n        const updateInfo = await checkForUpdates();\n        if (updateInfo.isOutdated) {\n            console.warn(makeYellow(\n                `You have ${updateInfo.name} version ${updateInfo.current} installed. The latest is ${updateInfo.latest}.\\n` +\n                `Run \\`npm -g install ${updateInfo.name}\\` to upgrade.\\n`\n            ));\n        }\n\n        // Setup basic CLI info\n        program\n            .version(pkg.version);\n\n        // Setup initiator action. This watches local FSevents directly, connects to the remote host over SSH to watch\n        // remote FSevents (by running another instance of itself, remotely, in watch more), and runs the actual\n        // unison sync process when an FSevent is received.\n        program\n            .command('sync <configPath>')\n            .description('Run bidirectional sync process with file watching.')\n            .option(\"--freq <seconds>\", \"How many seconds to wait between periodic full tree syncs\", 30)\n            .action((configPath, options) => {\n                const freq = parseInt(options.freq, 10);\n                self.run__sync(configPath, freq);\n            });\n\n        // Setup remote watcher action. This command is ran over an SSH connection by the sync initiator. It doesn't\n        // actually sync anything - it just watches the given directory and dumps FSevent notifications to stdout. The\n        // sync initiator reacts to those events by running the sync process.\n        program\n            .command('watch <rootPath>')\n            .option(\"-i, --ignore <patterns>\", \"File patterns to ignore, separated by semicolons.\")\n            .description('Run file watcher and dump changed files to stdout.')\n            .action((rootPath, options) => {\n                const ignorePatterns = options.ignore\n                    ? (options.ignore as string).split(';')\n                    : [];\n                self.run__watch(rootPath, ignorePatterns);\n            });\n\n        // Setup catch-all action.\n        program\n            .command('*', '', { noHelp: true, })\n            .action((cmd) => {\n                console.error(makeRed(`Unknown command was provided: \"${cmd}\"`));\n                self.die();\n            });\n\n        // Parse and run\n        program.parse(this.argv);\n        if (program.args.length <= 0) {\n            self.die();\n        }\n    }\n\n\n    /**\n     * Output CLI command help and exit the process.\n     */\n    private die() {\n        program.outputHelp(makeRed);\n        process.exit(1);\n    }\n\n\n    /**\n     * Run the sync initiator process. This does 3 things:\n     *\n     * 1. Watch local FS (INOTIFY) events.\n     * 2. Watch remote FS (INOTIFY) events over an SSH connection.\n     * 3. Queue / run syncs whenever a change is detected.\n     */\n    private async run__sync(configPath: string, periodicSyncInterval: number) {\n        const self = this;\n\n        // Read the configuration file\n        const config = readConfig(configPath);\n\n        // Create unison configuration file\n        writeUnisonConfigFile(config);\n\n        // Run initial sync (and wait for it to finish before starting file watchers).\n        await this.runSync({\n            config: config,\n            source: 'local',\n            eventType: 'initial',\n            directory: '.',\n        });\n\n        // Figure out which files to ignore\n        const watchIgnorePatterns = this.getWatchIgnorePatterns(config);\n\n        // Start local file watcher\n        await this.watchLocal(config, watchIgnorePatterns);\n\n        // Start remote file watcher\n        this.watchRemote(config, watchIgnorePatterns);\n\n        // Periodically trigger a full tree sync\n        setInterval(() => {\n            self.syncQueue.queue(config, 'local', 'periodic-sync', '.');\n        }, periodicSyncInterval * 1000);\n\n        // Make sure that file watchers are closed when the process exits\n        registerCleanupFn(() => {\n            console.log('Closing file watchers...');\n            if (self.localWatcher) {\n                self.localWatcher.close();\n            }\n\n            console.log('Closing SSH connection...');\n            if (self.remoteWatcher) {\n                self.remoteWatcher.write('\\x03');\n                self.remoteWatcher.close();\n            }\n            if (self.sshClient) {\n                self.sshClient.end();\n            }\n\n            console.log('Done.');\n        });\n    }\n\n\n    /**\n     * Run the remote file watcher. Dumps FS events to stdout so they can be read over SSH.\n     */\n    private run__watch(rootPath: string, ignorePatterns: string[]) {\n        const watcher = buildWatcher(rootPath, ignorePatterns);\n\n        // Start remote file watcher\n        watcher.on('ready', () => {\n            const watches = watcher.getWatched();\n            const dirs = Object.keys(watches);\n            const fileCount = dirs.reduce((memo, dir) => {\n                return memo + watches[dir].length;\n            }, 0);\n            process.stdout.write(`Finished initial scan. Watching ${fileCount} files in ${dirs.length} directories.\\n`);\n        });\n\n        // Dump change events to stdout\n        watcher.on('all', (eventType: string, filePath: string) => {\n            const relPath = path.relative(rootPath, filePath);\n            const msg = JSON.stringify(['remote', eventType, relPath]);\n            process.stdout.write(`CMD: ${msg}\\n`);\n        });\n\n        // Make sure that file watchers are closed when the process exits\n        registerCleanupFn(() => {\n            process.stdout.write(`Closing remote file watchers...\\n`);\n            watcher.close();\n            process.stdout.write(`Done.\\n`);\n        });\n    }\n\n\n    private async watchRemote (config: IAccordanceConfig, ignorePatterns: string[]) {\n        const self = this;\n        const sshAgentSock = process.env.SSH_AUTH_SOCK;\n        const sshConfig: ConnectConfig = {\n            host: config.remote.host,\n            port: 22,\n            username: config.remote.username || os.userInfo().username,\n            agent: sshAgentSock,\n        };\n        const cmd = ['accordance', 'watch', config.remote.root];\n        if (ignorePatterns.length > 0) {\n            cmd.push('-i');\n            cmd.push(`'${ignorePatterns.join(';')}'`);\n        }\n\n        const handleRemoteOutputLine = function(line: string) {\n            const command = line.match(/^CMD:\\s(.+)$/);\n            if (!command) {\n                console.log(`REMOTE: ${line}`);\n                return;\n            }\n            const [source, eventType, filePath] = (JSON.parse(command[1]) as string[]);\n            self.syncQueue.queue(config, source, eventType, filePath);\n        };\n\n        const conn = await getConnection(sshConfig);\n\n        self.sshClient = conn;\n\n        conn.exec(cmd.join(' '), { pty: true }, (err, stream) => {\n            if (err) {\n                throw err;\n            }\n\n            self.remoteWatcher = stream;\n\n            // Buffer stdout and action on each line\n            const stdoutBuffer = readline.createInterface({ input: stream, });\n            stdoutBuffer.on('line', (line: string) => {\n                handleRemoteOutputLine(line);\n            });\n\n            // Buffer stderr and log each line\n            const stderrBuffer = readline.createInterface({ input: stream.stderr, });\n            stderrBuffer.on('line', (line: string) => {\n                console.log(makeRed(`REMOTE ERROR: ${line}`));\n            });\n\n            // Log connection close events\n            stream.on('close', (code: number, signal: number) => {\n                console.log(makeRed(`Connection to remote was closed with code ${code}, signal: ${signal}`));\n                conn.end();\n            });\n        });\n\n        conn.on('close', () => {\n            console.log(makeRed(`Connection to remote was closed!`));\n        });\n        conn.on('end', () => {\n            console.log(makeRed(`Connection to remote was ended!`));\n        });\n        conn.on('error', () => {\n            console.log(makeRed(`Connection to remote encountered an error!`));\n        });\n    }\n\n\n    private async watchLocal (config: IAccordanceConfig, ignorePatterns: string[]) {\n        const self = this;\n        return new Promise((resolve) => {\n            console.log('Starting local file watchers...');\n\n            const watcher = buildWatcher(config.local.root, ignorePatterns);\n            watcher.on('ready', () => {\n                const watches = watcher.getWatched();\n                const dirs = Object.keys(watches);\n                const fileCount = dirs.reduce((memo, dir) => {\n                    return memo + watches[dir].length;\n                }, 0);\n                console.log(`Finished initial scan. Watching ${fileCount} files in ${dirs.length} directories.`);\n                resolve(fileCount);\n            });\n\n            // React to FS changes\n            watcher.on('all', (eventType: string, filePath: string) => {\n                const relPath = path.relative(config.local.root, filePath);\n                self.syncQueue.queue(config, 'local', eventType, relPath);\n            });\n\n            this.localWatcher = watcher;\n        });\n    }\n\n\n    private getWatchIgnorePatterns (config: IAccordanceConfig) {\n        let watchIgnorePatterns: string[] = [];\n        if (config.syncIgnore) {\n            watchIgnorePatterns = watchIgnorePatterns.concat(getAnyMatchIgnorePatterns(config.local.root, config.syncIgnore));\n        }\n        if (config.watchIgnore) {\n            watchIgnorePatterns = watchIgnorePatterns.concat(getAnyMatchIgnorePatterns(config.local.root, config.watchIgnore));\n        }\n        return watchIgnorePatterns;\n    }\n\n\n    private runSync (queueEntry?: ISyncQueueEntry) {\n        const self = this;\n        return new Promise<void>((resolve) => {\n            // Use locking to make sure we only run one sync at a time\n            if (this.syncIsRunning) {\n                return;\n            }\n\n            // Figure out what to sync\n            if (!queueEntry) {\n                queueEntry = this.syncQueue.dequeue();\n            }\n            if (!queueEntry) {\n                return;\n            }\n\n            self.syncIsRunning = true;\n            try {\n                console.log(makeGreen(`SYNCING: ${queueEntry.directory}`));\n                const child = childProcess.spawn('unison', [queueEntry.config.name, '-path', queueEntry.directory]);\n\n                const writeLines = function(stream: NodeJS.WritableStream, data: string | Buffer) {\n                    const lines = data\n                        .toString()\n                        .split('\\n')\n                        .map((line) => {\n                            if (!line || line === '\\n' || line === '\\r') {\n                                return line;\n                            }\n                            if (line.indexOf('\\r') !== -1) {\n                                return `\\rUNISON: ${line.replace('\\r', '')}`;\n                            }\n                            return `UNISON: ${line}`;\n                        })\n                        .join('\\n');\n                    stream.write(lines);\n                };\n\n                // Pipe child process stdout to main process stdout\n                if (child.stdout) {\n                    child.stdout.on('data', (data) => {\n                        writeLines(process.stdout, data);\n                    });\n                }\n\n                // Pipe child process stderr to main process stderr\n                if (child.stderr) {\n                    child.stderr.on('data', (data) => {\n                        writeLines(process.stdout, data);\n                    });\n                }\n\n                // Handle sync finish\n                child.on('close', (code) => {\n                    // Unset sync locks\n                    self.syncIsRunning = false;\n                    // Log any errors\n                    if (code !== 0) {\n                        console.log(makeRed(`Unison exited with code ${code}`));\n                        resolve();\n                        return;\n                    }\n                    // If more sync actions were requested while this sync was running, run sync again.\n                    if (self.syncQueue.size() > 0) {\n                        setImmediate(() => {\n                            self.runSync();\n                        });\n                    }\n                    // Resolve\n                    resolve();\n                });\n            } catch (e) {\n                console.error(e);\n                self.syncIsRunning = false;\n                resolve();\n            }\n        });\n    }\n}\n\n\nconst main = async function(argv: string[]) {\n    const cli = new AccordCLI(argv);\n    return cli.run();\n};\n\n\nmain(process.argv);\n"]}