{"version":3,"file":"manifest.js","sourceRoot":"","sources":["../../src/utils/manifest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2BAA8B;AAC9B,gDAAmD;AACnD,yBAA2B;AAC3B,uDAA+C;AAC/C,2CAAwC;AAGxC,IAAM,mBAAmB,GAAG,CAAC,CAAC,IAAI,CAAC;IAC/B,IAAI,EAAE,CAAC,CAAC,MAAM;IACd,OAAO,EAAE,CAAC,CAAC,MAAM;IACjB,WAAW,EAAE,CAAC,CAAC,MAAM;CACxB,CAAC,CAAC;AAGH,IAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC;IACtB,MAAM,EAAE,CAAC,CAAC,MAAM;IAChB,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC;QAChB,QAAQ,EAAE,CAAC,CAAC,MAAM;KACrB,CAAC;CACL,CAAC,CAAC;AAGU,QAAA,cAAc,GAAG;IAC1B,IAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;IACtF,IAAM,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;IAC1C,IAAM,QAAQ,GAAG,mBAAmB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACzD,IAAI,eAAM,CAAC,QAAQ,CAAC,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,sBAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACtD;IACD,OAAO,QAAQ,CAAC,KAAK,CAAC;AAC1B,CAAC,CAAC;AAGW,QAAA,eAAe,GAAG;;;;;;oBACrB,GAAG,GAAG,sBAAc,EAAE,CAAC;oBACV,qBAAM,OAAO,CAAC;4BAC7B,GAAG,EAAE,gCAA8B,GAAG,CAAC,IAAM;4BAC7C,IAAI,EAAE,IAAI;yBACb,CAAC,EAAA;;oBAHI,UAAU,GAAG,SAGjB;oBACI,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBAC9C,IAAI,eAAM,CAAC,OAAO,CAAC,EAAE;wBACjB,MAAM,IAAI,KAAK,CAAC,sBAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;qBACrD;oBACD,sBAAO;4BACH,UAAU,EAAE,CAAC,GAAG,CAAC,OAAO,KAAK,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;4BAC/D,IAAI,EAAE,GAAG,CAAC,IAAI;4BACd,OAAO,EAAE,GAAG,CAAC,OAAO;4BACpB,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM;yBAC5C,EAAC;;;;CACL,CAAC","sourcesContent":["import path = require('path');\nimport request = require('request-promise-native');\nimport * as t from 'io-ts';\nimport {failure} from 'io-ts/lib/PathReporter';\nimport {isLeft} from 'fp-ts/lib/Either';\n\n\nconst NodePackageManifest = t.type({\n    name: t.string,\n    version: t.string,\n    description: t.string,\n});\n\n\nconst NPMPkgInfo = t.type({\n    'name': t.string,\n    'dist-tags': t.type({\n        'latest': t.string,\n    }),\n});\n\n\nexport const getPackageInfo = function() {\n    const manifestPath = path.normalize(path.join(__dirname, '..', '..', 'package.json'));\n    const rawManifest = require(manifestPath);\n    const manifest = NodePackageManifest.decode(rawManifest);\n    if (isLeft(manifest)) {\n        throw new Error(failure(manifest.left).join('\\n'));\n    }\n    return manifest.right;\n};\n\n\nexport const checkForUpdates = async function() {\n    const pkg = getPackageInfo();\n    const npmInfoRaw = await request({\n        uri: `https://registry.npmjs.org/${pkg.name}`,\n        json: true,\n    });\n    const npmInfo = NPMPkgInfo.decode(npmInfoRaw);\n    if (isLeft(npmInfo)) {\n        throw new Error(failure(npmInfo.left).join('\\n'));\n    }\n    return {\n        isOutdated: (pkg.version !== npmInfo.right['dist-tags'].latest),\n        name: pkg.name,\n        current: pkg.version,\n        latest: npmInfo.right['dist-tags'].latest,\n    };\n};\n"]}