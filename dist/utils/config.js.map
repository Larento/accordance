{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/utils/config.ts"],"names":[],"mappings":"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","sourcesContent":["import os = require('os');\nimport path = require('path');\nimport yaml = require('js-yaml');\nimport fs = require('fs');\nimport * as t from 'io-ts';\nimport {failure} from 'io-ts/lib/PathReporter';\n\n\nconst AccordanceConfigBase = t.type({\n    name: t.string,\n    local: t.type({\n        root: t.string,\n    }),\n    remote: t.type({\n        username: t.string,\n        host: t.string,\n        root: t.string,\n    }),\n    prefer: t.union([\n        t.literal('local'),\n        t.literal('remote'),\n    ]),\n});\n\nconst AccordanceConfigExtras = t.partial({\n    syncIgnore: t.array(t.string),\n    watchIgnore: t.array(t.string),\n    options: t.record(t.string, t.boolean),\n});\n\nconst AccordanceConfig = t.intersection([\n    AccordanceConfigBase,\n    AccordanceConfigExtras,\n]);\n\nexport type IAccordanceConfig = t.TypeOf<typeof AccordanceConfig>;\n\n\nexport const readConfig = function(configPath: string, encoding = 'utf8') {\n    const content = fs.readFileSync(configPath, encoding);\n    const rawConfig = yaml.safeLoad(content);\n    return AccordanceConfig\n        .decode(rawConfig)\n        .getOrElseL((errors) => {\n            throw new Error(failure(errors).join('\\n'));\n        });\n};\n\n\nconst _getIgnorePattern = function(rootPath: string, unisonIgnore: string) {\n    const groups = unisonIgnore.match(/^([\\w]+)\\s+(.+)$/);\n    if (!groups) {\n        return [];\n    }\n    const ignoreType = groups[1];\n    const rawPattern = groups[2];\n    switch (ignoreType) {\n    case 'Name':\n        return [\n            `${rawPattern}/**`,\n            `**/${rawPattern}/**`,\n            `**/${rawPattern}`,\n        ];\n    case 'Path':\n        return [\n            path.join(rootPath, rawPattern),\n            path.join(rootPath, rawPattern.replace(/\\*/g, '**')),\n        ];\n    }\n    return [\n        rawPattern,\n    ];\n};\n\n\nexport const getAnyMatchIgnorePatterns = function(rootPath: string, rules: string[]) {\n    return rules.reduce<string[]>((memo, rule) => {\n        return memo.concat(_getIgnorePattern(rootPath, rule));\n    }, []);\n};\n\n\nexport const getUnisonConfigPath = function(config: IAccordanceConfig) {\n    const homeDir = os.homedir();\n    const configPath = path.join(homeDir, '.unison', `${config.name}.prf`);\n    return path.normalize(configPath);\n};\n\n\nconst _buildUnisonConfigLine = function(key: string, rawValue: string | boolean) {\n    let value: string;\n    if (rawValue === true) {\n        value = 'true';\n    } else if (rawValue === false) {\n        value = 'false';\n    } else {\n        value = rawValue;\n    }\n    return `${key} = ${value}`;\n};\n\n\nexport const buildUnisonConfig = function(config: IAccordanceConfig) {\n    // Setup the local and remote roots\n    const remoteURL = `ssh://${config.remote.host}/${config.remote.root}`;\n    const lines: string[] = [\n        _buildUnisonConfigLine('root', config.local.root),\n        _buildUnisonConfigLine('root', remoteURL),\n    ];\n\n    // Set the preferred root\n    if (config.prefer === 'local') {\n        lines.push(_buildUnisonConfigLine('prefer', config.local.root));\n    } else {\n        lines.push(_buildUnisonConfigLine('prefer', remoteURL));\n    }\n\n    // Add the ignore rules\n    if (config.syncIgnore) {\n        config.syncIgnore.forEach((rule) => {\n            lines.push(_buildUnisonConfigLine('ignore', rule));\n        });\n    }\n\n    // Add other misc options\n    if (config.options) {\n        for (const opt of Object.keys(config.options)) {\n            lines.push(_buildUnisonConfigLine(opt, config.options[opt]));\n        }\n    }\n\n    // Join into a single string\n    return lines.join('\\n');\n};\n\n\nexport const writeUnisonConfigFile = function(config: IAccordanceConfig) {\n    const unisonConfigPath = getUnisonConfigPath(config);\n    const unisonConfigDir = path.dirname(unisonConfigPath);\n    if (!fs.existsSync(unisonConfigDir)) {\n        fs.mkdirSync(path.dirname(unisonConfigPath));\n    }\n    const unisonConfigContent = buildUnisonConfig(config);\n    fs.writeFileSync(unisonConfigPath, unisonConfigContent);\n};\n"]}