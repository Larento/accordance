{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../src/utils/queue.ts"],"names":[],"mappings":";;AAAA,2BAA8B;AAE9B,6BAAgC;AAchC;IAcI,mBAAa,OAAmB;QAbhC;;WAEG;QACK,WAAM,GAAsB,EAAE,CAAC;QAWnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAGD;;OAEG;IACH,yBAAK,GAAL,UAAO,MAAyB,EAAE,MAAc,EAAE,SAAiB,EAAE,QAAgB;QACjF,IAAM,IAAI,GAAG,IAAI,CAAC;QAElB,gGAAgG;QAChG,mCAAmC;QACnC,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM;aACvB,MAAM,CAAC,UAAC,CAAC;YACN,OAAO,CAAC,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QACP,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,OAAO;SACV;QAED,sFAAsF;QACtF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;aACpB,MAAM,CAAC,UAAC,CAAC;YACN,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEP,+DAA+D;QAC/D,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,EAAE;YACzB,IAAM,GAAG,GAAM,MAAM,CAAC,WAAW,EAAE,UAAK,SAAS,SAAI,QAAU,CAAC;YAChE,OAAO,CAAC,GAAG,CAAC,eAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,MAAM,GAAG;gBACV;oBACI,MAAM,EAAE,MAAM;oBACd,MAAM,EAAE,MAAM;oBACd,SAAS,EAAE,UAAU;oBACrB,SAAS,EAAE,GAAG;iBACjB;aACJ,CAAC;YACF,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;QAED,iCAAiC;QACjC,OAAO,CAAC,GAAG,CAAC,eAAS,CAAC,qBAAmB,SAAS,YAAO,QAAQ,YAAO,MAAQ,CAAC,CAAC,CAAC;QACnF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACb,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,MAAM;YACd,SAAS,EAAE,SAAS;YACpB,SAAS,EAAE,GAAG;SACjB,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAGD;;OAEG;IACH,2BAAO,GAAP;QACI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;IAGD;;OAEG;IACH,wBAAI,GAAJ;QACI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAC7B,CAAC;IAGO,kCAAc,GAAtB,UAAwB,MAAc,EAAE,KAAa;QACjD,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IACL,gBAAC;AAAD,CAAC,AAxFD,IAwFC;AAxFY,8BAAS","sourcesContent":["import path = require('path');\nimport {IAccordanceConfig} from './config';\nimport {makeGreen} from './cli';\n\n\n/**\n * Interface of an entry in the unison sync queue\n */\nexport interface ISyncQueueEntry {\n    config: IAccordanceConfig;\n    source: string;\n    eventType: string;\n    directory: string;\n}\n\n\nexport class SyncQueue {\n    /**\n     * Queue of directories that need sync'd. Will be processed in FIFO order.\n     */\n    private _queue: ISyncQueueEntry[] = [];\n\n\n    /**\n     * Callback function to be run after an item is added to the queue\n     * @type {[type]}\n     */\n    private onQueue: () => void;\n\n\n    constructor (onQueue: () => void) {\n        this.onQueue = onQueue;\n    }\n\n\n    /**\n     * Add a path to the sync queue\n     */\n    queue (config: IAccordanceConfig, source: string, eventType: string, filePath: string) {\n        const self = this;\n\n        // If this directory exists in the queue already, OR if it's a subdirectory of something already\n        // in the queue, don't do anything.\n        const dir = path.dirname(filePath);\n        const existing = this._queue\n            .filter((e) => {\n                return e.directory === dir || self.isSubDirectory(e.directory, dir);\n            });\n        if (existing.length > 0) {\n            return;\n        }\n\n        // If any subdirectories of the new directory already exist in the queue, remove them.\n        this._queue = this._queue\n            .filter((e) => {\n                return !self.isSubDirectory(dir, e.directory);\n            });\n\n        // If the sync queue if getting huge, wipe it a sync everything\n        if (this._queue.length > 50) {\n            const msg = `${source.toUpperCase()}: ${eventType} ${filePath}`;\n            console.log(makeGreen(msg));\n            this._queue = [\n                {\n                    config: config,\n                    source: source,\n                    eventType: 'overflow',\n                    directory: '.',\n                }\n            ];\n            this.onQueue();\n        }\n\n        // Otherwise, just queue the sync\n        console.log(makeGreen(`QUEUE: Detected ${eventType} to ${filePath} on ${source}`));\n        this._queue.push({\n            config: config,\n            source: source,\n            eventType: eventType,\n            directory: dir,\n        });\n        this.onQueue();\n    }\n\n\n    /**\n     * Dequeue an entry from the sync queue\n     */\n    dequeue () {\n        return this._queue.shift();\n    }\n\n\n    /**\n     * Get the size of the sync queue\n     */\n    size () {\n        return this.queue.length;\n    }\n\n\n    private isSubDirectory (parent: string, child: string) {\n        return path.relative(child, parent).indexOf('..') === 0;\n    }\n}\n"]}